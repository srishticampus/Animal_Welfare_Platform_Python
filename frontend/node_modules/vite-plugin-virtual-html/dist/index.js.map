{"version":3,"sources":["../src/html/types.ts","../src/html/Base.ts","../src/history-api/historyApiFallbackPlugin.ts","../src/html/Serve.ts","../src/html/Build.ts","../src/html/VirtualHtmlPlugin.ts","../src/index.ts"],"sourcesContent":["import { type IncomingMessage } from 'http'\n\nexport type PageObject = {\n  template: string,\n  data?: VirtualHtmlTemplateData,\n  render?: VirtualHtmlTemplateRender,\n}\n/**\n * describe a page\n */\nexport type VirtualHtmlPage = string | PageObject | VirtualPageOptions\n/**\n * html template render\n */\nexport type VirtualHtmlTemplateRender = (template: string, data: Record<string, any>, htmlName?: string) => string\n\nexport type VirtualHtmlTemplateData = Record<string, any>\n\nexport type Pages = {\n  [key: string]: VirtualHtmlPage\n}\n\nexport type VirtualPageOptions = {\n  entry: string,\n  title?: string,\n  body?: string,\n}\n\nexport type UrlTransformerFunction = (resolvedUrl: string, req: IncomingMessage) => string\n\n/**\n * plugin config options\n */\nexport type HtmlPluginOptions = {\n  /**\n   * config html-entries' path\n   * if it is true, plugin will use glob to find all the html page in project to generate a json like {a: /src/a/a.html,}\n   */\n  pages?: Pages | true,\n  /**\n   * transform url to another url by user.\n   * This is ONLY apply in dev mode.\n   * @param url\n   */\n  urlTransformer?: UrlTransformerFunction\n  /**\n   * define the index page,to replace default index.html\n   * this page will trigger `transformIndexHtml` hook.\n   */\n  indexPage?: string,\n  /**\n   * use for template. as global inject data\n   */\n  data?: Record<string, unknown>\n  /**\n   * function to render template\n   */\n  render?: VirtualHtmlTemplateRender\n  /**\n   * when pages set to true, customize fast-glob's pattern\n   * default value is ['**\\\\*.html', '!node_modules\\\\**\\\\*.html', '!.**\\\\*.html']\n   */\n  extraGlobPattern?: Array<string>\n  /**\n   * inject code to html\n   * key: html name, can be *\n   */\n  injectCode?: Record<string, InjectCode>\n  \n}\n\n/**\n * inject code to tag's before or after\n */\nexport enum POS {\n  before, after\n}\n\n/**\n * inject code config\n */\nexport type InjectCode = {\n  pos: POS,\n  find: string,\n  replacement: string,\n}\n","import type {\n  HtmlPluginOptions,\n  InjectCode,\n  PageObject,\n  VirtualHtmlTemplateData,\n} from \"./types\";\nimport {\n  Pages,\n  POS,\n  VirtualHtmlPage,\n  VirtualHtmlTemplateRender,\n  VirtualPageOptions,\n} from \"./types\";\nimport { createFilter, normalizePath, type UserConfig } from \"vite\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport glob from \"fast-glob\";\nimport debug from \"debug\";\nimport { createRequire } from \"node:module\";\nimport MagicString from \"magic-string\";\n\nconst _require =\n  import.meta.url !== undefined ? createRequire(import.meta.url) : require;\n\nconst fsp = fs.promises;\nconst DEFAULT_GLOB_PATTERN = [\n  \"**/*.html\",\n  \"!node_modules/**/*.html\",\n  \"!.**/*.html\",\n];\n\nconst VIRTUAL_HTML_CONTENT = new MagicString(`\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>#TITLE#</title>\n    <script src=\"#ENTRY#\" type=\"module\"></script>\n</head>\n<body>\n#BODY#\n</body>\n</html>\n`);\nexport const DEFAULT_INJECTCODE_ALL = \"*\";\n\nexport class Base {\n  _config?: UserConfig;\n\n  _pages: Pages;\n\n  _indexPage: string;\n\n  _globalRender: VirtualHtmlTemplateRender;\n\n  _globalData: Record<string, unknown>;\n\n  _injectCode: Record<string, InjectCode>;\n\n  cwd = normalizePath(process.cwd());\n  logger = debug(\"vite-plugin-virtual-html\");\n  _filter: (id: string | unknown) => boolean;\n\n  constructor(virtualHtmlOptions: HtmlPluginOptions) {\n    const {\n      pages: pagesObj,\n      indexPage = \"index\",\n      render = this.defaultRender,\n      data = {},\n      extraGlobPattern = [],\n      injectCode = {},\n    } = virtualHtmlOptions;\n    if (pagesObj === true || pagesObj === undefined) {\n      this._pages = this.findAllHtmlInProject(extraGlobPattern);\n    } else {\n      this._pages = pagesObj;\n    }\n    this._indexPage = indexPage;\n    this._globalData = data;\n    this._globalRender = render;\n    this._injectCode = injectCode;\n    this._filter = createFilter(/\\.html|\\/$/);\n  }\n\n  /**\n   * load html file\n   * @param args\n   */\n  _load = async (...args: [string, unknown]) => {\n    const [id] = args;\n    if (this._filter(id)) {\n      let newId = this.getHtmlName(id, this._config?.root);\n      const maybeIndexName1 = (newId + \"/\").replace(\"//\", \"/\");\n      const maybeIndexName2 = (newId + \"/index\").replace(\"//\", \"/\");\n      const maybeIndexName3 = newId.replace(\"index\", \"\").replace(\"//\", \"/\");\n\n      const pageOption: VirtualHtmlPage | VirtualPageOptions =\n        this._pages[newId] ||\n        this._pages[maybeIndexName1] ||\n        this._pages[maybeIndexName2] ||\n        this._pages[maybeIndexName3];\n      if (pageOption !== undefined) {\n        // string\n        if (typeof pageOption === \"string\") {\n          const page = await this.generatePageOptions(\n            pageOption,\n            this._globalData,\n            this._globalRender\n          );\n          // generate html template\n          return await this.readHtml(page);\n        }\n        // PageObject\n        if (\"template\" in pageOption) {\n          const page = await this.generatePageOptions(\n            pageOption,\n            this._globalData,\n            this._globalRender\n          );\n          // generate html template\n          return await this.readHtml(page);\n        }\n        // VirtualPageOptions\n        if (\"entry\" in pageOption) {\n          return await this.generateVirtualPage(pageOption);\n        }\n      }\n    }\n    return undefined;\n  };\n\n  /**\n   * transform code to inject some code into original code\n   * @param args\n   */\n  _transform = async (\n    ...args: [string, string, unknown]\n  ): Promise<string | null> => {\n    const [code, id] = args;\n    if (this._filter(id)) {\n      const ids = id.split(\"/\");\n      const key = ids[ids.length - 1];\n      let _code = code;\n      if (DEFAULT_INJECTCODE_ALL in this._injectCode) {\n        _code = this.generateInjectCode(\n          this._injectCode[DEFAULT_INJECTCODE_ALL],\n          _code\n        );\n      }\n      if (key in this._injectCode) {\n        _code = this.generateInjectCode(this._injectCode[key], _code);\n      }\n      return _code;\n    }\n    return null;\n  };\n\n  /**\n   * get html file's name\n   * @param id\n   * @param root\n   */\n  getHtmlName = (id: string, root?: string) => {\n    const _root = (root ?? \"\").replace(this.cwd, \"\");\n    const _id = id.replace(this.cwd, \"\");\n    const result = _id\n      .replace(\".html\", \"\")\n      .replace(_root !== \"\" ? this.addTrailingSlash(_root) : \"\", \"\");\n    return result.startsWith(\"/\") ? result.substring(1, result.length) : result;\n  };\n\n  /**\n   * add trailing slash on path\n   * @param {string} path\n   * @returns {string}\n   */\n  addTrailingSlash = (path: string): string => {\n    const _path = normalizePath(path.replace(this.cwd, \"\"));\n    return _path.endsWith(\"/\") ? _path : `${_path}/`;\n  };\n\n  /**\n   * generate URL\n   * @param url\n   */\n  generateUrl = (url?: string): string => {\n    if (!url) {\n      return \"/\";\n    }\n    // url with parameters\n    if (url.indexOf(\"?\") > 0) {\n      return url.split(\"?\")[0];\n    }\n    return url;\n  };\n\n  /**\n   * read HTML file from disk and generate code from template system(with render function)\n   * @param template\n   * @param data\n   * @param render\n   */\n  readHtml = async ({\n    template = \"\",\n    data = {},\n    render = this.defaultRender,\n  }: PageObject) => {\n    const templatePath = path.resolve(this.cwd, `.${template}`);\n    if (!fs.existsSync(templatePath)) {\n      this.logger(\"[vite-plugin-virtual-html]: template file must exist!\");\n      return \"\";\n    }\n    return await this.renderTemplate(templatePath, render, data);\n  };\n\n  /**\n   * render template\n   * @param templatePath\n   * @param render\n   * @param data\n   */\n  renderTemplate = async (\n    templatePath: string,\n    render: VirtualHtmlTemplateRender,\n    data: VirtualHtmlTemplateData\n  ) => {\n    const code = await this.readTemplate(templatePath);\n    return render(\n      code,\n      data,\n      templatePath.substring(templatePath.lastIndexOf(path.sep) + 1)\n    );\n  };\n\n  /**\n   * read html file's content to render with render function\n   * @param templatePath\n   */\n  readTemplate = async (templatePath: string): Promise<string> => {\n    const result = await fsp.readFile(templatePath);\n    return result.toString();\n  };\n\n  /**\n   * generate page option from string/object to object\n   * @param page\n   * @param globalData\n   * @param globalRender\n   */\n  generatePageOptions = async (\n    page: PageObject | string,\n    globalData: Record<string, unknown>,\n    globalRender: VirtualHtmlTemplateRender\n  ): Promise<PageObject> => {\n    if (typeof page === \"string\") {\n      return {\n        template: page,\n        data: {\n          ...globalData,\n        },\n        render: globalRender,\n      };\n    }\n    const { data = {}, render, template } = page;\n    return {\n      template: template,\n      data: {\n        ...globalData,\n        ...data,\n      },\n      render: render ?? globalRender ?? this.defaultRender,\n    };\n  };\n\n  /**\n   * directly use find\\replacement / replacement\\find to replace find\n   * @param {pos, find, replacement}\n   * @param code\n   */\n  generateInjectCode = (\n    { pos, find, replacement }: InjectCode,\n    code: string\n  ): string => {\n    if (pos === POS.after) {\n      return code.replace(find, `${find}\\n${replacement}`);\n    }\n    if (pos === POS.before) {\n      return code.replace(find, `\\n${replacement}\\n${find}`);\n    }\n    return code;\n  };\n\n  /**\n   * generate page from virtual page\n   * @param vPages\n   */\n  generateVirtualPage = async (vPages: VirtualPageOptions): Promise<string> => {\n    const { entry, title = \"\", body = '<div id=\"app\"></div>' } = vPages;\n    return VIRTUAL_HTML_CONTENT.replace(\"#ENTRY#\", entry)\n      .replace(\"#TITLE#\", title)\n      .replace(\"#BODY#\", body)\n      .toString();\n  };\n\n  /**\n   * find all html file in project and return it as Pages\n   */\n  findAllHtmlInProject = (extraGlobPattern: Array<string> = []): Pages => {\n    const pages: Pages = {};\n    let realPattern: Array<string> = [];\n    if (extraGlobPattern.length === 0) {\n      realPattern = DEFAULT_GLOB_PATTERN;\n    } else {\n      const set: Set<string> = new Set();\n      DEFAULT_GLOB_PATTERN.forEach((dg) => set.add(dg));\n      extraGlobPattern.forEach((dg) => set.add(dg));\n      for (let key of set.keys()) {\n        realPattern.push(key);\n      }\n    }\n    const files = glob.sync(realPattern);\n    files.forEach((file) => {\n      const filePathArr = file.split(\"/\");\n      pages[\n        filePathArr[filePathArr.length - 1].replace(\".html\", \"\")\n      ] = `/${file}`;\n    });\n    return pages;\n  };\n\n  defaultRender: VirtualHtmlTemplateRender = (\n    template: string,\n    data: Record<string, any>\n  ) => {\n    try {\n      const resolved = _require.resolve(\"ejs\");\n      return _require(resolved).render(template, data, {\n        delimiter: \"%\",\n        root: process.cwd(),\n      });\n    } catch (e) {\n      //\n    }\n    return template;\n  };\n}\n","import type { Connect, Plugin, ViteDevServer } from 'vite'\nimport history from 'connect-history-api-fallback'\nimport type { HistoryApiOptions, HistoryRewrites } from './types'\n\n// noinspection JSUnusedGlobalSymbols\nexport const historyApiFallbackPlugin = (historyApiOptions: HistoryApiOptions): Plugin => {\n  const {\n    rewrites,\n    usePreview\n  } = historyApiOptions\n  const configureServerHookName = usePreview ? 'configurePreviewServer' : 'configureServer'\n  return {\n    name: 'vite-plugin-virtual-html:history',\n    [configureServerHookName](server: ViteDevServer) {\n      if (rewrites) {\n        buildHistoryApiFallback(server, rewrites)\n      }\n    },\n  }\n}\n\n/**\n * build a server\n * @param server\n * @param rewrites\n */\nexport function buildHistoryApiFallback(server: ViteDevServer, rewrites: Array<HistoryRewrites>) {\n  server.middlewares.use(history({\n    disableDotRule: undefined,\n    htmlAcceptHeaders: ['text/html', 'application/xhtml+xml'],\n    rewrites: rewrites,\n  }) as Connect.NextHandleFunction)\n}\n","import type { HtmlPluginOptions, UrlTransformerFunction } from './types'\nimport { Base } from './Base'\nimport { buildHistoryApiFallback } from '../history-api/historyApiFallbackPlugin'\nimport type { ViteDevServer } from 'vite'\nimport { normalizePath, createFilter, } from 'vite'\nimport type { HistoryApiOptions, HistoryRewrites } from '../history-api/types'\n\nconst HTML_INCLUDE = [/\\.html$/,/\\/$/]\nconst HTML_FILTER = createFilter(HTML_INCLUDE)\n\nexport class Serve extends Base {\n  _rewrites?: Array<HistoryRewrites>\n  \n  _urlTransformer?: UrlTransformerFunction\n  \n  constructor(virtualHtmlOptions: HtmlPluginOptions & HistoryApiOptions) {\n    super(virtualHtmlOptions)\n    this._rewrites = virtualHtmlOptions.rewrites\n    this._urlTransformer = virtualHtmlOptions.urlTransformer\n  }\n  \n  _configureServer = (server: ViteDevServer) => {\n    if (this._rewrites) {\n      buildHistoryApiFallback(server, this._rewrites)\n    }\n    // other html handled after vite's inner middlewares.\n    return () => {\n      server.middlewares.use(async (req, res, next) => {\n        const originalUrl = req.originalUrl\n        const reqUrl = req.url\n        let url = decodeURI(this.generateUrl(originalUrl?.endsWith('/') ? originalUrl : reqUrl))\n        // allow user customize url transformer\n        if (this._urlTransformer) {\n          url = this._urlTransformer(url, req)\n        }\n        // if request is not html , directly return next()\n        if (!HTML_FILTER(url) && url !== '/') {\n          return next()\n        }\n        // request / means client requests an index page\n        // load it with indexPage config\n        let htmlCode: string|undefined\n        if (url === '/' || url === '/index.html') {\n          url = `/${this._indexPage}.html`\n        }\n        // load specify html file code\n        // @ts-ignore\n        htmlCode = await this._load(normalizePath(url))\n        if (htmlCode === undefined) {\n          res.statusCode = 404\n          res.end()\n          return next()\n        }\n        // @ts-ignore\n        const transformResult = await this._transform(htmlCode, url)\n        if (transformResult === null) {\n          return next()\n        }\n        res.end(await server.transformIndexHtml(url, transformResult))\n        next()\n      })\n    }\n  }\n}\n","import type { HtmlPluginOptions } from './types'\nimport { VirtualHtmlPage, VirtualPageOptions } from './types'\nimport type { UserConfig } from 'vite'\nimport { normalizePath } from 'vite'\nimport { Base } from './Base'\nimport fs, { promises as fsp } from 'fs'\nimport path from 'path'\n\nexport class Build extends Base {\n  \n  _needRemove: Array<string> = []\n  _distDir!: string\n  \n  constructor(virtualHtmlOptions: HtmlPluginOptions) {\n    super(virtualHtmlOptions)\n  }\n  \n  /**\n   * check html file's parent directory\n   * @param html\n   * @param needRemove\n   */\n  async checkVirtualPath(html: string, needRemove: Array<string>, root: string) {\n    const cwd = normalizePath(path.resolve(this.cwd, root))\n    const pathArr = html.split('/')\n    const fileName = pathArr[pathArr.length - 1]\n    const middlePath = html.replace(fileName, '').replace(cwd, '')\n    const firstPath = middlePath.split('/')[1]\n    if (!fs.existsSync(middlePath)) {\n      needRemove.push(normalizePath(path.resolve(cwd, `./${firstPath}`)))\n      await fsp.mkdir(path.resolve(cwd, `./${middlePath}`), {\n        recursive: true\n      })\n    }\n  }\n  \n  async _buildConfig(config: UserConfig,) {\n    this._config = config\n    const pagesKey = Object.keys(this._pages)\n    for (let i = 0; i < pagesKey.length; i++) {\n      const key = pagesKey[i]\n      const pageOption = this._pages[key]\n      const vHtml = normalizePath(path.resolve(this.cwd, `./${config.root ? this.addTrailingSlash(config.root) : ''}${this.htmlNameAddIndex(key)}.html`))\n      if (!fs.existsSync(vHtml)) {\n        this._needRemove.push(vHtml)\n        await this.checkVirtualPath(vHtml, this._needRemove, config.root ?? '')\n        if (typeof pageOption === 'string' || 'template' in pageOption) {\n          const genPageOption = await this.generatePageOptions(pageOption, this._globalData, this._globalRender)\n          await fsp.copyFile(path.resolve(this.cwd, `.${genPageOption.template}`), vHtml)\n        }\n        if (typeof pageOption !== 'string' && 'entry' in pageOption) {\n          await fsp.writeFile(path.resolve(this.cwd, vHtml), await this.generateVirtualPage(pageOption))\n        }\n      }\n    }\n    this.logger('[vite-plugin-virtual-html]: This plugin cannot use in library mode!')\n    // get custom distDir config,if it is undefined use default config 'dist'\n    this._distDir = config.build?.outDir ?? 'dist'\n    // inject build.rollupOptions.input from pages directly.\n    config.build = {\n      ...config.build,\n      rollupOptions: {\n        ...config.build?.rollupOptions,\n        input: {\n          ...(config.build?.rollupOptions?.input as object),\n          ...this.extractHtmlPath(this._pages),\n        },\n      },\n    }\n  }\n  \n  _closeBundle() {\n    // remove files should not be under project root\n    for (let vHtml of this._needRemove) {\n      if (fs.existsSync(vHtml)) {\n        fsp.rm(vHtml, {\n          recursive: true,\n        }).catch(() => {\n          // ignore this warning\n        })\n      }\n    }\n  }\n  \n  /**\n   * use pages' key as html name\n   * @param pages\n   */\n  extractHtmlPath(pages: {\n    [p: string]: VirtualHtmlPage | VirtualPageOptions\n  }) {\n    const newPages: {\n      [key: string]: string\n    } = {}\n    Object.keys(pages).forEach(key => {\n      newPages[key] = `/${this.htmlNameAddIndex(key)}.html`\n    })\n    return newPages\n  }\n  \n  htmlNameAddIndex(htmlName: string): string {\n    return htmlName.endsWith('/') ? htmlName + 'index' : htmlName\n  }\n  \n}\n","import { HtmlPluginOptions } from \"./types\";\nimport type { ConfigEnv, Plugin, UserConfig } from \"vite\";\nimport { HistoryApiOptions } from \"../history-api/types\";\nimport { Serve } from \"./Serve\";\nimport { Build } from \"./Build\";\n\nexport const VirtualHtmlPlugin = (\n  virtualHtmlOptions: HtmlPluginOptions & HistoryApiOptions\n): Plugin => {\n  let _htmlOptions = virtualHtmlOptions;\n  let _config: UserConfig;\n  let _instance: Serve | Build | null = null;\n  return {\n    name: \"vite-plugin-virtual-html\",\n    async config(config: UserConfig, { command }: ConfigEnv) {\n      config.appType = \"custom\";\n      _config = config;\n      if (command === \"serve\") {\n        _instance = new Serve(_htmlOptions);\n      } else if (command === \"build\") {\n        _instance = new Build(_htmlOptions);\n        await _instance._buildConfig.call(_instance, config);\n      }\n    },\n    configureServer(server) {\n      if ((_instance as Serve)._configureServer) {\n        return (_instance as Serve)._configureServer(server);\n      }\n    },\n    async load(...args) {\n      if (_instance?._load) {\n        return await _instance._load(...args);\n      }\n    },\n    async transform(...args) {\n      if (_instance?._transform) {\n        return await _instance._transform(...args);\n      }\n    },\n    closeBundle() {\n      if ((_instance as Build)._closeBundle) {\n        return (_instance as Build)._closeBundle();\n      }\n    },\n  };\n};\n","import type { Plugin, } from 'vite'\nimport type { HtmlPluginOptions, } from './html/types'\nimport { VirtualHtmlPlugin } from './html/VirtualHtmlPlugin'\nimport type { HistoryApiOptions } from './history-api/types'\n\nexport default (virtualHtmlOptions: HtmlPluginOptions & HistoryApiOptions): Plugin => {\n  return VirtualHtmlPlugin(virtualHtmlOptions)\n}\n\nexport {\n  VirtualHtmlPlugin,\n}\n\nexport * from './html/Build'\n\nexport * from './html/Serve'\n\nexport * from './history-api/historyApiFallbackPlugin'\n\nexport * from './html/types'\n\nexport * from './history-api/types'\n"],"mappings":"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","names":["POS","path","normalizePath","createFilter","normalizePath","fs","fsp","path","normalizePath"]}